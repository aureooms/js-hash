'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.sha1 = sha1;

var _jsUint = require('@aureooms/js-uint32');

function cycle(h, w) {

	// initialize hash value for this chunk:
	var a = h[0];
	var b = h[1];
	var c = h[2];
	var d = h[3];
	var e = h[4];

	// Main loop:[35]
	// for j from 0 to 79
	for (var j = 0; j < 80; ++j) {

		var f = void 0,
		    k = void 0;

		// if 0 ≤ j ≤ 19 then
		if (0 <= j && j <= 19) {
			// f = (b and c) or ((not b) and d)
			f = b & c | ~b & d;
			k = 1518500249; // 0x5A827999
		}
		// else if 20 ≤ j ≤ 39
		else if (20 <= j && j <= 39) {
				// f = b xor c xor d
				f = b ^ c ^ d;
				k = 1859775393; // 0x6ED9EBA1
			}
			// else if 40 ≤ j ≤ 59
			else if (40 <= j && j <= 59) {
					// f = (b and c) or (b and d) or (c and d)
					f = b & c | b & d | c & d;
					k = -1894007588; // 0x8F1BBCDC
				}
				// else if 60 ≤ j ≤ 79
				else {
						// f = b xor c xor d
						f = b ^ c ^ d;
						k = -899497514; // 0xCA62C1D6
					}

		// t = (a leftrotate 5) + f + e + k + w[j]
		var t = (0, _jsUint.add32)((0, _jsUint.add32)((0, _jsUint.rotl32)(a, 5), f), (0, _jsUint.add32)((0, _jsUint.add32)(e, k), w[j]));
		e = d;
		d = c;
		// c = b leftrotate 30
		c = (0, _jsUint.rotl32)(b, 30);
		b = a;
		a = t;
	}

	// Add this chunk's hash to result so far:
	h[0] = (0, _jsUint.add32)(h[0], a);
	h[1] = (0, _jsUint.add32)(h[1], b);
	h[2] = (0, _jsUint.add32)(h[2], c);
	h[3] = (0, _jsUint.add32)(h[3], d);
	h[4] = (0, _jsUint.add32)(h[4], e);
}

function call(h, data, o) {

	var w = new Array(80);

	// break chunk into sixteen 32-bit big-endian words w[i], 0 ≤ i ≤ 15
	for (var j = 0; j < 16; ++j) {
		w[j] = (0, _jsUint.big32)(data, o + j * 4);
	}

	// Extend the sixteen 32-bit words into eighty 32-bit words:
	// for j from 16 to 79
	for (var _j = 16; _j < 80; ++_j) {
		// w[j] = (w[j-3] xor w[j-8] xor w[j-14] xor w[j-16]) leftrotate 1
		var k = w[_j - 3] ^ w[_j - 8] ^ w[_j - 14] ^ w[_j - 16];
		w[_j] = (0, _jsUint.rotl32)(k, 1);
	}

	cycle(h, w);
}

/**
 * SHA1
 */
function sha1(bytes, n, digest) {

	// PREPARE

	var q = n / 8 | 0;
	var z = q * 8;
	var u = n - z;

	// append the bit '1' to the message
	var last = void 0;
	if (u > 0) {
		last = bytes[q] & ~0 << 7 - u;
	} else {
		last = 0x80;
	}

	// Note 1: All variables are unsigned 32 bits and wrap modulo 2^32 when calculating
	// Note 2: All constants in this pseudo code are in big endian.
	// Within each word, the most significant byte is stored in the leftmost byte position

	// Initialize state:
	var h = [(0, _jsUint.get32)(0x67452301), (0, _jsUint.get32)(0xEFCDAB89), (0, _jsUint.get32)(0x98BADCFE), (0, _jsUint.get32)(0x10325476), (0, _jsUint.get32)(0xC3D2E1F0)];

	// Process the message in successive 512-bit chunks:
	// break message into 512-bit chunks

	var m = n / 512 | 0;
	var y = (n - 512 * m) / 8 | 0;

	// offset in data
	var o = 0;

	// for each chunk
	for (var j = 0; j < m; ++j, o += 64) {
		call(h, bytes, o);
	}

	// last bytes + padding + length
	var tail = [];

	// last bytes
	for (var _j2 = 0; _j2 < y; ++_j2) {
		tail.push(bytes[o + _j2]);
	}

	// special care taken for the very last byte which could
	// have been modified if n is not a multiple of 8
	tail.push(last);

	// append 0 ≤ k < 512 bits '0', so that the resulting
	// message length (in bits) is congruent to 448 (mod 512)
	var zeroes = (448 - (n + 1) % 512) / 8 | 0;

	if (zeroes < 0) {
		// we need an additional block as there is
		// not enough space left to append
		// the length of the data in bits

		for (var _j3 = 0; _j3 < -zeroes; ++_j3) {
			tail.push(0);
		}

		call(h, tail, 0);

		zeroes = 448 / 8;
		tail = [];
	}

	// pad with zeroes
	for (var _j4 = 0; _j4 < zeroes; ++_j4) {
		tail.push(0);
	}

	// append length of message (before preparation), in bits,
	// as 64-bit big-endian integer

	// JavaScript works with 32 bit integers.
	// tail.push((n >>> 56) & 0xFF);
	// tail.push((n >>> 48) & 0xFF);
	// tail.push((n >>> 40) & 0xFF);
	// tail.push((n >>> 32) & 0xFF);
	tail.push(0);
	tail.push(0);
	tail.push(0);
	tail.push(0);

	tail.push(n >>> 24 & 0xFF);
	tail.push(n >>> 16 & 0xFF);
	tail.push(n >>> 8 & 0xFF);
	tail.push(n >>> 0 & 0xFF);

	call(h, tail, 0);

	digest[0] = h[0] >>> 24 & 0xFF;
	digest[1] = h[0] >>> 16 & 0xFF;
	digest[2] = h[0] >>> 8 & 0xFF;
	digest[3] = h[0] >>> 0 & 0xFF;
	digest[4] = h[1] >>> 24 & 0xFF;
	digest[5] = h[1] >>> 16 & 0xFF;
	digest[6] = h[1] >>> 8 & 0xFF;
	digest[7] = h[1] >>> 0 & 0xFF;
	digest[8] = h[2] >>> 24 & 0xFF;
	digest[9] = h[2] >>> 16 & 0xFF;
	digest[10] = h[2] >>> 8 & 0xFF;
	digest[11] = h[2] >>> 0 & 0xFF;
	digest[12] = h[3] >>> 24 & 0xFF;
	digest[13] = h[3] >>> 16 & 0xFF;
	digest[14] = h[3] >>> 8 & 0xFF;
	digest[15] = h[3] >>> 0 & 0xFF;
	digest[16] = h[4] >>> 24 & 0xFF;
	digest[17] = h[4] >>> 16 & 0xFF;
	digest[18] = h[4] >>> 8 & 0xFF;
	digest[19] = h[4] >>> 0 & 0xFF;

	return digest;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,