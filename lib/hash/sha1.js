"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.sha1 = sha1;

function cycle(h, w) {

	// initialize hash value for this chunk:
	var a = h[0];
	var b = h[1];
	var c = h[2];
	var d = h[3];
	var e = h[4];

	// Main loop:[35]
	// for j from 0 to 79
	for (var j = 0; j < 80; ++j) {

		var f = void 0,
		    k = void 0;

		// if 0 ≤ j ≤ 19 then
		if (0 <= j && j <= 19) {
			// f = (b and c) or ((not b) and d)
			f = b & c | ~b & d;
			k = 0x5A827999;
		}
		// else if 20 ≤ j ≤ 39
		else if (20 <= j && j <= 39) {
				// f = b xor c xor d
				f = b ^ c ^ d;
				k = 0x6ED9EBA1;
			}
			// else if 40 ≤ j ≤ 59
			else if (40 <= j && j <= 59) {
					// f = (b and c) or (b and d) or (c and d)
					f = b & c | b & d | c & d;
					k = 0x8F1BBCDC;
				}
				// else if 60 ≤ j ≤ 79
				else {
						// f = b xor c xor d
						f = b ^ c ^ d;
						k = 0xCA62C1D6;
					}

		// t = (a leftrotate 5) + f + e + k + w[j]
		var t = add32(add32(rot32(a, 5), f), add32(add32(e, k), w[j]));
		e = d;
		d = c;
		// c = b leftrotate 30
		c = rot32(b, 30);
		b = a;
		a = t;
	}

	// Add this chunk's hash to result so far:
	h[0] = add32(h[0], a);
	h[1] = add32(h[1], b);
	h[2] = add32(h[2], c);
	h[3] = add32(h[3], d);
	h[4] = add32(h[4], e);
}

function call(h, data, o) {

	var w = new Array(80);

	// break chunk into sixteen 32-bit big-endian words w[i], 0 ≤ i ≤ 15
	for (var j = 0; j < 16; ++j) {
		w[j] = big32(data, o + j * 4);
	}

	// Extend the sixteen 32-bit words into eighty 32-bit words:
	// for j from 16 to 79
	for (var _j = 16; _j < 80; ++_j) {
		// w[j] = (w[j-3] xor w[j-8] xor w[j-14] xor w[j-16]) leftrotate 1
		var k = w[_j - 3] ^ w[_j - 8] ^ w[_j - 14] ^ w[_j - 16];
		w[_j] = rot32(k, 1);
	}

	cycle(h, w);
}

/**
 * SHA1
 */
function sha1(bytes, n, digest) {

	// PREPARE

	var q = n / 8 | 0;
	var z = q * 8;
	var u = n - z;

	// append the bit '1' to the message
	var last = void 0;
	if (u > 0) {
		last = bytes[q] & ~0 << 7 - u;
	} else {
		last = 0x80;
	}

	// Note 1: All variables are unsigned 32 bits and wrap modulo 2^32 when calculating
	// Note 2: All constants in this pseudo code are in big endian.
	// Within each word, the most significant byte is stored in the leftmost byte position

	// Initialize state:
	var h = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

	// Process the message in successive 512-bit chunks:
	// break message into 512-bit chunks

	var m = n / 512 | 0;
	var y = (n - 512 * m) / 8 | 0;

	// offset in data
	var o = 0;

	// for each chunk
	for (var j = 0; j < m; ++j, o += 64) {
		call(h, bytes, o);
	}

	// last bytes + padding + length
	var tail = [];

	// last bytes
	for (var _j2 = 0; _j2 < y; ++_j2) {
		tail.push(bytes[o + _j2]);
	}

	// special care taken for the very last byte which could
	// have been modified if n is not a multiple of 8
	tail.push(last);

	// append 0 ≤ k < 512 bits '0', so that the resulting
	// message length (in bits) is congruent to 448 (mod 512)
	var zeroes = (448 - (n + 1) % 512) / 8 | 0;

	if (zeroes < 0) {
		// we need an additional block as there is
		// not enough space left to append
		// the length of the data in bits

		for (var _j3 = 0; _j3 < -zeroes; ++_j3) {
			tail.push(0);
		}

		call(h, tail, 0);

		zeroes = 448 / 8;
		tail = [];
	}

	// pad with zeroes
	for (var _j4 = 0; _j4 < zeroes; ++_j4) {
		tail.push(0);
	}

	// append length of message (before preparation), in bits,
	// as 64-bit big-endian integer

	// JavaScript works with 32 bit integers.
	// tail.push((n >>> 56) & 0xFF);
	// tail.push((n >>> 48) & 0xFF);
	// tail.push((n >>> 40) & 0xFF);
	// tail.push((n >>> 32) & 0xFF);
	tail.push(0);
	tail.push(0);
	tail.push(0);
	tail.push(0);

	tail.push(n >>> 24 & 0xFF);
	tail.push(n >>> 16 & 0xFF);
	tail.push(n >>> 8 & 0xFF);
	tail.push(n >>> 0 & 0xFF);

	call(h, tail, 0);

	digest[0] = h[0] >>> 24 & 0xFF;
	digest[1] = h[0] >>> 16 & 0xFF;
	digest[2] = h[0] >>> 8 & 0xFF;
	digest[3] = h[0] >>> 0 & 0xFF;
	digest[4] = h[1] >>> 24 & 0xFF;
	digest[5] = h[1] >>> 16 & 0xFF;
	digest[6] = h[1] >>> 8 & 0xFF;
	digest[7] = h[1] >>> 0 & 0xFF;
	digest[8] = h[2] >>> 24 & 0xFF;
	digest[9] = h[2] >>> 16 & 0xFF;
	digest[10] = h[2] >>> 8 & 0xFF;
	digest[11] = h[2] >>> 0 & 0xFF;
	digest[12] = h[3] >>> 24 & 0xFF;
	digest[13] = h[3] >>> 16 & 0xFF;
	digest[14] = h[3] >>> 8 & 0xFF;
	digest[15] = h[3] >>> 0 & 0xFF;
	digest[16] = h[4] >>> 24 & 0xFF;
	digest[17] = h[4] >>> 16 & 0xFF;
	digest[18] = h[4] >>> 8 & 0xFF;
	digest[19] = h[4] >>> 0 & 0xFF;

	return digest;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oYXNoL3NoYTEuanMiXSwibmFtZXMiOlsic2hhMSIsImN5Y2xlIiwiaCIsInciLCJhIiwiYiIsImMiLCJkIiwiZSIsImoiLCJmIiwiayIsInQiLCJhZGQzMiIsInJvdDMyIiwiY2FsbCIsImRhdGEiLCJvIiwiQXJyYXkiLCJiaWczMiIsImJ5dGVzIiwibiIsImRpZ2VzdCIsInEiLCJ6IiwidSIsImxhc3QiLCJtIiwieSIsInRhaWwiLCJwdXNoIiwiemVyb2VzIl0sIm1hcHBpbmdzIjoiOzs7OztRQW1GZ0JBLEksR0FBQUEsSTs7QUFsRmhCLFNBQVNDLEtBQVQsQ0FBZ0JDLENBQWhCLEVBQW1CQyxDQUFuQixFQUFzQjs7QUFFckI7QUFDQSxLQUFJQyxJQUFJRixFQUFFLENBQUYsQ0FBUjtBQUNBLEtBQUlHLElBQUlILEVBQUUsQ0FBRixDQUFSO0FBQ0EsS0FBSUksSUFBSUosRUFBRSxDQUFGLENBQVI7QUFDQSxLQUFJSyxJQUFJTCxFQUFFLENBQUYsQ0FBUjtBQUNBLEtBQUlNLElBQUlOLEVBQUUsQ0FBRixDQUFSOztBQUVBO0FBQ0E7QUFDQSxNQUFLLElBQUlPLElBQUksQ0FBYixFQUFnQkEsSUFBSSxFQUFwQixFQUF3QixFQUFFQSxDQUExQixFQUE2Qjs7QUFFNUIsTUFBSUMsVUFBSjtBQUFBLE1BQU9DLFVBQVA7O0FBRUE7QUFDQSxNQUFHLEtBQUtGLENBQUwsSUFBVUEsS0FBSyxFQUFsQixFQUFxQjtBQUNwQjtBQUNBQyxPQUFLTCxJQUFJQyxDQUFMLEdBQVksQ0FBRUQsQ0FBSCxHQUFRRSxDQUF2QjtBQUNBSSxPQUFJLFVBQUo7QUFDQTtBQUNEO0FBTEEsT0FNSyxJQUFHLE1BQU1GLENBQU4sSUFBV0EsS0FBSyxFQUFuQixFQUFzQjtBQUMxQjtBQUNBQyxRQUFJTCxJQUFJQyxDQUFKLEdBQVFDLENBQVo7QUFDQUksUUFBSSxVQUFKO0FBQ0E7QUFDRDtBQUxLLFFBTUEsSUFBRyxNQUFNRixDQUFOLElBQVdBLEtBQUssRUFBbkIsRUFB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LEVBQUUsQ0FBRixNQUFVLENBQVgsR0FBZ0IsSUFBN0I7QUFDQW9CLFFBQU8sRUFBUCxJQUFjcEIsRUFBRSxDQUFGLE1BQVMsRUFBVixHQUFnQixJQUE3QjtBQUNBb0IsUUFBTyxFQUFQLElBQWNwQixFQUFFLENBQUYsTUFBUyxFQUFWLEdBQWdCLElBQTdCO0FBQ0FvQixRQUFPLEVBQVAsSUFBY3BCLEVBQUUsQ0FBRixNQUFVLENBQVgsR0FBZ0IsSUFBN0I7QUFDQW9CLFFBQU8sRUFBUCxJQUFjcEIsRUFBRSxDQUFGLE1BQVUsQ0FBWCxHQUFnQixJQUE3QjtBQUNBb0IsUUFBTyxFQUFQLElBQWNwQixFQUFFLENBQUYsTUFBUyxFQUFWLEdBQWdCLElBQTdCO0FBQ0FvQixRQUFPLEVBQVAsSUFBY3BCLEVBQUUsQ0FBRixNQUFTLEVBQVYsR0FBZ0IsSUFBN0I7QUFDQW9CLFFBQU8sRUFBUCxJQUFjcEIsRUFBRSxDQUFGLE1BQVUsQ0FBWCxHQUFnQixJQUE3QjtBQUNBb0IsUUFBTyxFQUFQLElBQWNwQixFQUFFLENBQUYsTUFBVSxDQUFYLEdBQWdCLElBQTdCOztBQUVBLFFBQU9vQixNQUFQO0FBRUEiLCJmaWxlIjoic2hhMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuZnVuY3Rpb24gY3ljbGUgKGgsIHcpIHtcblxuXHQvLyBpbml0aWFsaXplIGhhc2ggdmFsdWUgZm9yIHRoaXMgY2h1bms6XG5cdGxldCBhID0gaFswXTtcblx0bGV0IGIgPSBoWzFdO1xuXHRsZXQgYyA9IGhbMl07XG5cdGxldCBkID0gaFszXTtcblx0bGV0IGUgPSBoWzRdO1xuXG5cdC8vIE1haW4gbG9vcDpbMzVdXG5cdC8vIGZvciBqIGZyb20gMCB0byA3OVxuXHRmb3IgKGxldCBqID0gMDsgaiA8IDgwOyArK2opIHtcblxuXHRcdGxldCBmLCBrO1xuXG5cdFx0Ly8gaWYgMCDiiaQgaiDiiaQgMTkgdGhlblxuXHRcdGlmKDAgPD0gaiAmJiBqIDw9IDE5KXtcblx0XHRcdC8vIGYgPSAoYiBhbmQgYykgb3IgKChub3QgYikgYW5kIGQpXG5cdFx0XHRmID0gKGIgJiBjKSB8ICgofiBiKSAmIGQpO1xuXHRcdFx0ayA9IDB4NUE4Mjc5OTk7XG5cdFx0fVxuXHRcdC8vIGVsc2UgaWYgMjAg4omkIGog4omkIDM5XG5cdFx0ZWxzZSBpZigyMCA8PSBqICYmIGogPD0gMzkpe1xuXHRcdFx0Ly8gZiA9IGIgeG9yIGMgeG9yIGRcblx0XHRcdGYgPSBiIF4gYyBeIGQ7XG5cdFx0XHRrID0gMHg2RUQ5RUJBMTtcblx0XHR9XG5cdFx0Ly8gZWxzZSBpZiA0MCDiiaQgaiDiiaQgNTlcblx0XHRlbHNlIGlmKDQwIDw9IGogJiYgaiA8PSA1OSl7XG5cdFx0XHQvLyBmID0gKGIgYW5kIGMpIG9yIChiIGFuZCBkKSBvciAoYyBhbmQgZClcblx0XHRcdGYgPSAoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZCk7XG5cdFx0XHRrID0gMHg4RjFCQkNEQztcblx0XHR9XG5cdFx0Ly8gZWxzZSBpZiA2MCDiiaQgaiDiiaQgNzlcblx0XHRlbHNle1xuXHRcdFx0Ly8gZiA9IGIgeG9yIGMgeG9yIGRcblx0XHRcdGYgPSBiIF4gYyBeIGQ7XG5cdFx0XHRrID0gMHhDQTYyQzFENjtcblx0XHR9XG5cblx0XHQvLyB0ID0gKGEgbGVmdHJvdGF0ZSA1KSArIGYgKyBlICsgayArIHdbal1cblx0XHRjb25zdCB0ID0gYWRkMzIoYWRkMzIocm90MzIoYSwgNSksIGYpLCBhZGQzMihhZGQzMihlLCBrKSwgd1tqXSkpO1xuXHRcdGUgPSBkO1xuXHRcdGQgPSBjO1xuXHRcdC8vIGMgPSBiIGxlZnRyb3RhdGUgMzBcblx0XHRjID0gcm90MzIoYiwgMzApO1xuXHRcdGIgPSBhO1xuXHRcdGEgPSB0O1xuXHR9XG5cblx0Ly8gQWRkIHRoaXMgY2h1bmsncyBoYXNoIHRvIHJlc3VsdCBzbyBmYXI6XG5cdGhbMF0gPSBhZGQzMihoWzBdLCBhKTtcblx0aFsxXSA9IGFkZDMyKGhbMV0sIGIpO1xuXHRoWzJdID0gYWRkMzIoaFsyXSwgYyk7XG5cdGhbM10gPSBhZGQzMihoWzNdLCBkKTtcblx0aFs0XSA9IGFkZDMyKGhbNF0sIGUpO1xufVxuXG5mdW5jdGlvbiBjYWxsIChoLCBkYXRhLCBvKSB7XG5cblx0Y29uc3QgdyA9IG5ldyBBcnJheSg4MCk7XG5cblx0Ly8gYnJlYWsgY2h1bmsgaW50byBzaXh0ZWVuIDMyLWJpdCBiaWctZW5kaWFuIHdvcmRzIHdbaV0sIDAg4omkIGkg4omkIDE1XG5cdGZvciAobGV0IGogPSAwOyBqIDwgMTY7ICsraikge1xuXHRcdHdbal0gPSBiaWczMihkYXRhLCBvICsgaiAqIDQpO1xuXHR9XG5cblx0Ly8gRXh0ZW5kIHRoZSBzaXh0ZWVuIDMyLWJpdCB3b3JkcyBpbnRvIGVpZ2h0eSAzMi1iaXQgd29yZHM6XG5cdC8vIGZvciBqIGZyb20gMTYgdG8gNzlcblx0Zm9yKGxldCBqID0gMTY7IGogPCA4MDsgKytqKXtcblx0XHQvLyB3W2pdID0gKHdbai0zXSB4b3Igd1tqLThdIHhvciB3W2otMTRdIHhvciB3W2otMTZdKSBsZWZ0cm90YXRlIDFcblx0XHRjb25zdCBrID0gKHdbai0zXSBeIHdbai04XSBeIHdbai0xNF0gXiB3W2otMTZdKTtcblx0XHR3W2pdID0gcm90MzIoaywgMSk7XG5cdH1cblxuXHRjeWNsZShoLCB3KTtcblxufVxuXG4vKipcbiAqIFNIQTFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNoYTEgKGJ5dGVzLCBuLCBkaWdlc3QpIHtcblxuXHQvLyBQUkVQQVJFXG5cblx0Y29uc3QgcSA9IG4gLyA4IHwgMDtcblx0Y29uc3QgeiA9IHEgKiA4O1xuXHRjb25zdCB1ID0gbiAtIHo7XG5cblx0Ly8gYXBwZW5kIHRoZSBiaXQgJzEnIHRvIHRoZSBtZXNzYWdlXG5cdGxldCBsYXN0IDtcblx0aWYgKHUgPiAwKSB7XG5cdFx0bGFzdCA9IGJ5dGVzW3FdICYgKH4wKSA8PCAoNy11KTtcblx0fVxuXHRlbHNlIHtcblx0XHRsYXN0ID0gMHg4MDtcblx0fVxuXG5cdC8vIE5vdGUgMTogQWxsIHZhcmlhYmxlcyBhcmUgdW5zaWduZWQgMzIgYml0cyBhbmQgd3JhcCBtb2R1bG8gMl4zMiB3aGVuIGNhbGN1bGF0aW5nXG5cdC8vIE5vdGUgMjogQWxsIGNvbnN0YW50cyBpbiB0aGlzIHBzZXVkbyBjb2RlIGFyZSBpbiBiaWcgZW5kaWFuLlxuXHQvLyBXaXRoaW4gZWFjaCB3b3JkLCB0aGUgbW9zdCBzaWduaWZpY2FudCBieXRlIGlzIHN0b3JlZCBpbiB0aGUgbGVmdG1vc3QgYnl0ZSBwb3NpdGlvblxuXG5cdC8vIEluaXRpYWxpemUgc3RhdGU6XG5cdGNvbnN0IGggPSBbMHg2NzQ1MjMwMSwgMHhFRkNEQUI4OSwgMHg5OEJBRENGRSwgMHgxMDMyNTQ3NiwgMHhDM0QyRTFGMF07XG5cblx0Ly8gUHJvY2VzcyB0aGUgbWVzc2FnZSBpbiBzdWNjZXNzaXZlIDUxMi1iaXQgY2h1bmtzOlxuXHQvLyBicmVhayBtZXNzYWdlIGludG8gNTEyLWJpdCBjaHVua3NcblxuXHRjb25zdCBtID0gbiAvIDUxMiB8IDA7XG5cdGNvbnN0IHkgPSAobiAtIDUxMiAqIG0pIC8gOCB8IDA7XG5cblx0Ly8gb2Zmc2V0IGluIGRhdGFcblx0bGV0IG8gPSAwO1xuXG5cdC8vIGZvciBlYWNoIGNodW5rXG5cdGZvciAobGV0IGogPSAwOyBqIDwgbTsgKytqLCBvICs9IDY0KSB7XG5cdFx0Y2FsbChoLCBieXRlcywgbyk7XG5cdH1cblxuXHQvLyBsYXN0IGJ5dGVzICsgcGFkZGluZyArIGxlbmd0aFxuXHRsZXQgdGFpbCA9IFtdO1xuXG5cdC8vIGxhc3QgYnl0ZXNcblx0Zm9yIChsZXQgaiA9IDA7IGogPCB5OyArK2opIHtcblx0XHR0YWlsLnB1c2goYnl0ZXNbbyArIGpdKTtcblx0fVxuXG5cdC8vIHNwZWNpYWwgY2FyZSB0YWtlbiBmb3IgdGhlIHZlcnkgbGFzdCBieXRlIHdoaWNoIGNvdWxkXG5cdC8vIGhhdmUgYmVlbiBtb2RpZmllZCBpZiBuIGlzIG5vdCBhIG11bHRpcGxlIG9mIDhcblx0dGFpbC5wdXNoKGxhc3QpO1xuXG5cblx0Ly8gYXBwZW5kIDAg4omkIGsgPCA1MTIgYml0cyAnMCcsIHNvIHRoYXQgdGhlIHJlc3VsdGluZ1xuXHQvLyBtZXNzYWdlIGxlbmd0aCAoaW4gYml0cykgaXMgY29uZ3J1ZW50IHRvIDQ0OCAobW9kIDUxMilcblx0bGV0IHplcm9lcyA9ICg0NDggLSAobiArIDEpICUgNTEyKSAvIDggfCAwO1xuXG5cdGlmICh6ZXJvZXMgPCAwKSB7XG5cdFx0Ly8gd2UgbmVlZCBhbiBhZGRpdGlvbmFsIGJsb2NrIGFzIHRoZXJlIGlzXG5cdFx0Ly8gbm90IGVub3VnaCBzcGFjZSBsZWZ0IHRvIGFwcGVuZFxuXHRcdC8vIHRoZSBsZW5ndGggb2YgdGhlIGRhdGEgaW4gYml0c1xuXG5cdFx0Zm9yIChsZXQgaiA9IDA7IGogPCAtemVyb2VzOyArK2opIHtcblx0XHRcdHRhaWwucHVzaCgwKTtcblx0XHR9XG5cblx0XHRjYWxsKGgsIHRhaWwsIDApO1xuXG5cdFx0emVyb2VzID0gNDQ4IC8gODtcblx0XHR0YWlsID0gW107XG5cdH1cblxuXG5cdC8vIHBhZCB3aXRoIHplcm9lc1xuXHRmb3IgKGxldCBqID0gMDsgaiA8IHplcm9lczsgKytqKSB7XG5cdFx0dGFpbC5wdXNoKDApO1xuXHR9XG5cblx0Ly8gYXBwZW5kIGxlbmd0aCBvZiBtZXNzYWdlIChiZWZvcmUgcHJlcGFyYXRpb24pLCBpbiBiaXRzLFxuXHQvLyBhcyA2NC1iaXQgYmlnLWVuZGlhbiBpbnRlZ2VyXG5cblx0Ly8gSmF2YVNjcmlwdCB3b3JrcyB3aXRoIDMyIGJpdCBpbnRlZ2Vycy5cblx0Ly8gdGFpbC5wdXNoKChuID4+PiA1NikgJiAweEZGKTtcblx0Ly8gdGFpbC5wdXNoKChuID4+PiA0OCkgJiAweEZGKTtcblx0Ly8gdGFpbC5wdXNoKChuID4+PiA0MCkgJiAweEZGKTtcblx0Ly8gdGFpbC5wdXNoKChuID4+PiAzMikgJiAweEZGKTtcblx0dGFpbC5wdXNoKDApO1xuXHR0YWlsLnB1c2goMCk7XG5cdHRhaWwucHVzaCgwKTtcblx0dGFpbC5wdXNoKDApO1xuXG5cdHRhaWwucHVzaCgobiA+Pj4gMjQpICYgMHhGRik7XG5cdHRhaWwucHVzaCgobiA+Pj4gMTYpICYgMHhGRik7XG5cdHRhaWwucHVzaCgobiA+Pj4gIDgpICYgMHhGRik7XG5cdHRhaWwucHVzaCgobiA+Pj4gIDApICYgMHhGRik7XG5cblx0Y2FsbChoLCB0YWlsLCAwKTtcblxuXHRkaWdlc3RbMF0gID0gKGhbMF0gPj4+IDI0KSAmIDB4RkY7XG5cdGRpZ2VzdFsxXSAgPSAoaFswXSA+Pj4gMTYpICYgMHhGRjtcblx0ZGlnZXN0WzJdICA9IChoWzBdID4+PiAgOCkgJiAweEZGO1xuXHRkaWdlc3RbM10gID0gKGhbMF0gPj4+ICAwKSAmIDB4RkY7XG5cdGRpZ2VzdFs0XSAgPSAoaFsxXSA+Pj4gMjQpICYgMHhGRjtcblx0ZGlnZXN0WzVdICA9IChoWzFdID4+PiAxNikgJiAweEZGO1xuXHRkaWdlc3RbNl0gID0gKGhbMV0gPj4+ICA4KSAmIDB4RkY7XG5cdGRpZ2VzdFs3XSAgPSAoaFsxXSA+Pj4gIDApICYgMHhGRjtcblx0ZGlnZXN0WzhdICA9IChoWzJdID4+PiAyNCkgJiAweEZGO1xuXHRkaWdlc3RbOV0gID0gKGhbMl0gPj4+IDE2KSAmIDB4RkY7XG5cdGRpZ2VzdFsxMF0gPSAoaFsyXSA+Pj4gIDgpICYgMHhGRjtcblx0ZGlnZXN0WzExXSA9IChoWzJdID4+PiAgMCkgJiAweEZGO1xuXHRkaWdlc3RbMTJdID0gKGhbM10gPj4+IDI0KSAmIDB4RkY7XG5cdGRpZ2VzdFsxM10gPSAoaFszXSA+Pj4gMTYpICYgMHhGRjtcblx0ZGlnZXN0WzE0XSA9IChoWzNdID4+PiAgOCkgJiAweEZGO1xuXHRkaWdlc3RbMTVdID0gKGhbM10gPj4+ICAwKSAmIDB4RkY7XG5cdGRpZ2VzdFsxNl0gPSAoaFs0XSA+Pj4gMjQpICYgMHhGRjtcblx0ZGlnZXN0WzE3XSA9IChoWzRdID4+PiAxNikgJiAweEZGO1xuXHRkaWdlc3RbMThdID0gKGhbNF0gPj4+ICA4KSAmIDB4RkY7XG5cdGRpZ2VzdFsxOV0gPSAoaFs0XSA+Pj4gIDApICYgMHhGRjtcblxuXHRyZXR1cm4gZGlnZXN0O1xuXG59XG4iXX0=