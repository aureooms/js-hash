'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.sha224 = sha224;

var _uint = require('../uint32');

var k = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

function cycle(state, w) {

	// initialize hash value for this chunk:
	var a = state[0];
	var b = state[1];
	var c = state[2];
	var d = state[3];
	var e = state[4];
	var f = state[5];
	var g = state[6];
	var h = state[7];

	//Main loop:
	//for j from 0 to 63
	for (var j = 0; j < 64; ++j) {
		//S1 := (e rightrotate 6) xor (e rightrotate 11) xor (e rightrotate 25)
		var s1 = (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7);
		//ch := (e and f) xor ((not e) and g)
		var ch = e & f ^ ~e & g;
		//temp := h + S1 + ch + k[j] + w[j]
		var temp = (0, _uint.add32)((0, _uint.add32)(h, s1), (0, _uint.add32)((0, _uint.add32)(ch, k[j]), w[j]));
		//d := d + temp;
		d = (0, _uint.add32)(d, temp);
		//S0 := (a rightrotate 2) xor (a rightrotate 13) xor (a rightrotate 22)
		var s0 = (a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10);
		//maj := (a and (b xor c)) xor (b and c)
		var maj = a & (b ^ c) ^ b & c;
		//temp := temp + S0 + maj
		temp = (0, _uint.add32)((0, _uint.add32)(temp, s0), maj);

		h = g;
		g = f;
		f = e;
		e = d;
		d = c;
		c = b;
		b = a;
		a = temp;
	}

	// Add this chunk's hash to result so far:
	state[0] = (0, _uint.add32)(state[0], a);
	state[1] = (0, _uint.add32)(state[1], b);
	state[2] = (0, _uint.add32)(state[2], c);
	state[3] = (0, _uint.add32)(state[3], d);
	state[4] = (0, _uint.add32)(state[4], e);
	state[5] = (0, _uint.add32)(state[5], f);
	state[6] = (0, _uint.add32)(state[6], g);
	state[7] = (0, _uint.add32)(state[7], h);
}

function call(h, data, o) {

	var w = new Array(64);

	// break chunk into sixteen 32-bit big-endian words w[i], 0 ≤ i ≤ 15
	for (var j = 0; j < 16; ++j) {
		w[j] = (0, _uint.big32)(data, o + j * 4);
	}

	// Extend the sixteen 32-bit words into sixty-four 32-bit words:
	// for j from 16 to 63
	for (var _j = 16; _j < 64; ++_j) {
		//s0 := (w[j-15] rightrotate 7) xor (w[j-15] rightrotate 18) xor (w[j-15] rightshift 3)
		var s0 = (w[_j - 15] >>> 7 | w[_j - 15] << 25) ^ (w[_j - 15] >>> 18 | w[_j - 15] << 14) ^ w[_j - 15] >>> 3;
		//s1 := (w[j-2] rightrotate 17) xor (w[j-2] rightrotate 19) xor (w[j-2] rightshift 10)
		var s1 = (w[_j - 2] >>> 17 | w[_j - 2] << 15) ^ (w[_j - 2] >>> 19 | w[_j - 2] << 13) ^ w[_j - 2] >>> 10;
		//w[j] := w[j-16] + s0 + w[j-7] + s1
		w[_j] = (0, _uint.add32)((0, _uint.add32)(w[_j - 16], s0), (0, _uint.add32)(w[_j - 7], s1));
	}

	cycle(h, w);
}

/**
 * SHA-224
 *
 * SHA-224 is identical to SHA-256, except that:
 *  - the initial variable values h0 through h7 are different, and
 *  - the output is constructed by omitting h7.
 */
function sha224(bytes, n, digest) {

	// PREPARE

	var q = n / 8 | 0;
	var z = q * 8;
	var u = n - z;

	// append the bit '1' to the message
	var last = void 0;
	if (u > 0) {
		last = bytes[q] & ~0 << 7 - u;
	} else {
		last = 0x80;
	}

	// Note 1: All variables are unsigned 32 bits and wrap modulo 2^32 when calculating
	// Note 2: All constants in this pseudo code are in big endian.
	// Within each word, the most significant byte is stored in the leftmost byte position

	// Initialize state:
	var h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];

	// Process the message in successive 512-bit chunks:
	// break message into 512-bit chunks

	var m = n / 512 | 0;
	var y = (n - 512 * m) / 8 | 0;

	// offset in data
	var o = 0;

	// for each chunk
	for (var j = 0; j < m; ++j, o += 64) {
		call(h, bytes, o);
	}

	// last bytes + padding + length
	var tail = [];

	// last bytes
	for (var _j2 = 0; _j2 < y; ++_j2) {
		tail.push(bytes[o + _j2]);
	}

	// special care taken for the very last byte which could
	// have been modified if n is not a multiple of 8
	tail.push(last);

	// append 0 ≤ k < 512 bits '0', so that the resulting
	// message length (in bits) is congruent to 448 (mod 512)
	var zeroes = (448 - (n + 1) % 512) / 8 | 0;

	if (zeroes < 0) {
		// we need an additional block as there is
		// not enough space left to append
		// the length of the data in bits

		for (var _j3 = 0; _j3 < -zeroes; ++_j3) {
			tail.push(0);
		}

		call(h, tail, 0);

		zeroes = 448 / 8;
		tail = [];
	}

	// pad with zeroes
	for (var _j4 = 0; _j4 < zeroes; ++_j4) {
		tail.push(0);
	}

	// append length of message (before preparation), in bits,
	// as 64-bit big-endian integer

	// JavaScript works with 32 bit integers.
	// tail.push((n >>> 56) & 0xff);
	// tail.push((n >>> 48) & 0xff);
	// tail.push((n >>> 40) & 0xff);
	// tail.push((n >>> 32) & 0xff);
	tail.push(0);
	tail.push(0);
	tail.push(0);
	tail.push(0);

	tail.push(n >>> 24 & 0xff);
	tail.push(n >>> 16 & 0xff);
	tail.push(n >>> 8 & 0xff);
	tail.push(n >>> 0 & 0xff);

	call(h, tail, 0);

	digest[0] = h[0] >>> 24 & 0xff;
	digest[1] = h[0] >>> 16 & 0xff;
	digest[2] = h[0] >>> 8 & 0xff;
	digest[3] = h[0] >>> 0 & 0xff;
	digest[4] = h[1] >>> 24 & 0xff;
	digest[5] = h[1] >>> 16 & 0xff;
	digest[6] = h[1] >>> 8 & 0xff;
	digest[7] = h[1] >>> 0 & 0xff;
	digest[8] = h[2] >>> 24 & 0xff;
	digest[9] = h[2] >>> 16 & 0xff;
	digest[10] = h[2] >>> 8 & 0xff;
	digest[11] = h[2] >>> 0 & 0xff;
	digest[12] = h[3] >>> 24 & 0xff;
	digest[13] = h[3] >>> 16 & 0xff;
	digest[14] = h[3] >>> 8 & 0xff;
	digest[15] = h[3] >>> 0 & 0xff;
	digest[16] = h[4] >>> 24 & 0xff;
	digest[17] = h[4] >>> 16 & 0xff;
	digest[18] = h[4] >>> 8 & 0xff;
	digest[19] = h[4] >>> 0 & 0xff;
	digest[20] = h[5] >>> 24 & 0xff;
	digest[21] = h[5] >>> 16 & 0xff;
	digest[22] = h[5] >>> 8 & 0xff;
	digest[23] = h[5] >>> 0 & 0xff;
	digest[24] = h[6] >>> 24 & 0xff;
	digest[25] = h[6] >>> 16 & 0xff;
	digest[26] = h[6] >>> 8 & 0xff;
	digest[27] = h[6] >>> 0 & 0xff;

	return digest;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oYXNoL3NoYTIyNC5qcyJdLCJuYW1lcyI6WyJzaGEyMjQiLCJrIiwiY3ljbGUiLCJzdGF0ZSIsInciLCJhIiwiYiIsImMiLCJkIiwiZSIsImYiLCJnIiwiaCIsImoiLCJzMSIsImNoIiwidGVtcCIsInMwIiwibWFqIiwiY2FsbCIsImRhdGEiLCJvIiwiQXJyYXkiLCJieXRlcyIsIm4iLCJkaWdlc3QiLCJxIiwieiIsInUiLCJsYXN0IiwibSIsInkiLCJ0YWlsIiwicHVzaCIsInplcm9lcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFpR2dCQSxNLEdBQUFBLE07O0FBakdoQjs7QUFFQSxJQUFNQyxJQUFJLENBQ1QsVUFEUyxFQUNHLFVBREgsRUFDZSxVQURmLEVBQzJCLFVBRDNCLEVBQ3VDLFVBRHZDLEVBQ21ELFVBRG5ELEVBQytELFVBRC9ELEVBQzJFLFVBRDNFLEVBRVQsVUFGUyxFQUVHLFVBRkgsRUFFZSxVQUZmLEVBRTJCLFVBRjNCLEVBRXVDLFVBRnZDLEVBRW1ELFVBRm5ELEVBRStELFVBRi9ELEVBRTJFLFVBRjNFLEVBR1QsVUFIUyxFQUdHLFVBSEgsRUFHZSxVQUhmLEVBRzJCLFVBSDNCLEVBR3VDLFVBSHZDLEVBR21ELFVBSG5ELEVBRytELFVBSC9ELEVBRzJFLFVBSDNFLEVBSVQsVUFKUyxFQUlHLFVBSkgsRUFJZSxVQUpmLEVBSTJCLFVBSjNCLEVBSXVDLFVBSnZDLEVBSW1ELFVBSm5ELEVBSStELFVBSi9ELEVBSTJFLFVBSjNFLEVBS1QsVUFMUyxFQUtHLFVBTEgsRUFLZSxVQUxmLEVBSzJCLFVBTDNCLEVBS3VDLFVBTHZDLEVBS21ELFVBTG5ELEVBSytELFVBTC9ELEVBSzJFLFVBTDNFLEVBTVQsVUFOUyxFQU1HLFVBTkgsRUFNZSxVQU5mLEVBTTJCLFVBTjNCLEVBTXVDLFVBTnZDLEVBTW1ELFVBTm5ELEVBTStELFVBTi9ELEVBTTJFLFVBTjNFLEVBT1QsVUFQUyxFQU9HLFVBUEgsRUFPZSxVQVBmLEVBTzJCLFVBUDNCLEVB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VixHQUFnQixJQUE3QjtBQUNBYSxRQUFPLENBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVUsQ0FBWCxHQUFnQixJQUE3QjtBQUNBYSxRQUFPLENBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVUsQ0FBWCxHQUFnQixJQUE3QjtBQUNBYSxRQUFPLENBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVMsRUFBVixHQUFnQixJQUE3QjtBQUNBYSxRQUFPLENBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVMsRUFBVixHQUFnQixJQUE3QjtBQUNBYSxRQUFPLENBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVUsQ0FBWCxHQUFnQixJQUE3QjtBQUNBYSxRQUFPLENBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVUsQ0FBWCxHQUFnQixJQUE3QjtBQUNBYSxRQUFPLENBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVMsRUFBVixHQUFnQixJQUE3QjtBQUNBYSxRQUFPLENBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVMsRUFBVixHQUFnQixJQUE3QjtBQUNBYSxRQUFPLEVBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVUsQ0FBWCxHQUFnQixJQUE3QjtBQUNBYSxRQUFPLEVBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVUsQ0FBWCxHQUFnQixJQUE3QjtBQUNBYSxRQUFPLEVBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVMsRUFBVixHQUFnQixJQUE3QjtBQUNBYSxRQUFPLEVBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVMsRUFBVixHQUFnQixJQUE3QjtBQUNBYSxRQUFPLEVBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVUsQ0FBWCxHQUFnQixJQUE3QjtBQUNBYSxRQUFPLEVBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVUsQ0FBWCxHQUFnQixJQUE3QjtBQUNBYSxRQUFPLEVBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVMsRUFBVixHQUFnQixJQUE3QjtBQUNBYSxRQUFPLEVBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVMsRUFBVixHQUFnQixJQUE3QjtBQUNBYSxRQUFPLEVBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVUsQ0FBWCxHQUFnQixJQUE3QjtBQUNBYSxRQUFPLEVBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVUsQ0FBWCxHQUFnQixJQUE3QjtBQUNBYSxRQUFPLEVBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVMsRUFBVixHQUFnQixJQUE3QjtBQUNBYSxRQUFPLEVBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVMsRUFBVixHQUFnQixJQUE3QjtBQUNBYSxRQUFPLEVBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVUsQ0FBWCxHQUFnQixJQUE3QjtBQUNBYSxRQUFPLEVBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVUsQ0FBWCxHQUFnQixJQUE3QjtBQUNBYSxRQUFPLEVBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVMsRUFBVixHQUFnQixJQUE3QjtBQUNBYSxRQUFPLEVBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVMsRUFBVixHQUFnQixJQUE3QjtBQUNBYSxRQUFPLEVBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVUsQ0FBWCxHQUFnQixJQUE3QjtBQUNBYSxRQUFPLEVBQVAsSUFBY2IsRUFBRSxDQUFGLE1BQVUsQ0FBWCxHQUFnQixJQUE3Qjs7QUFFQSxRQUFPYSxNQUFQO0FBRUEiLCJmaWxlIjoic2hhMjI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWRkMzIgLCBiaWczMiB9IGZyb20gJy4uL3VpbnQzMicgO1xuXG5jb25zdCBrID0gW1xuXHQweDQyOGEyZjk4LCAweDcxMzc0NDkxLCAweGI1YzBmYmNmLCAweGU5YjVkYmE1LCAweDM5NTZjMjViLCAweDU5ZjExMWYxLCAweDkyM2Y4MmE0LCAweGFiMWM1ZWQ1LFxuXHQweGQ4MDdhYTk4LCAweDEyODM1YjAxLCAweDI0MzE4NWJlLCAweDU1MGM3ZGMzLCAweDcyYmU1ZDc0LCAweDgwZGViMWZlLCAweDliZGMwNmE3LCAweGMxOWJmMTc0LFxuXHQweGU0OWI2OWMxLCAweGVmYmU0Nzg2LCAweDBmYzE5ZGM2LCAweDI0MGNhMWNjLCAweDJkZTkyYzZmLCAweDRhNzQ4NGFhLCAweDVjYjBhOWRjLCAweDc2Zjk4OGRhLFxuXHQweDk4M2U1MTUyLCAweGE4MzFjNjZkLCAweGIwMDMyN2M4LCAweGJmNTk3ZmM3LCAweGM2ZTAwYmYzLCAweGQ1YTc5MTQ3LCAweDA2Y2E2MzUxLCAweDE0MjkyOTY3LFxuXHQweDI3YjcwYTg1LCAweDJlMWIyMTM4LCAweDRkMmM2ZGZjLCAweDUzMzgwZDEzLCAweDY1MGE3MzU0LCAweDc2NmEwYWJiLCAweDgxYzJjOTJlLCAweDkyNzIyYzg1LFxuXHQweGEyYmZlOGExLCAweGE4MWE2NjRiLCAweGMyNGI4YjcwLCAweGM3NmM1MWEzLCAweGQxOTJlODE5LCAweGQ2OTkwNjI0LCAweGY0MGUzNTg1LCAweDEwNmFhMDcwLFxuXHQweDE5YTRjMTE2LCAweDFlMzc2YzA4LCAweDI3NDg3NzRjLCAweDM0YjBiY2I1LCAweDM5MWMwY2IzLCAweDRlZDhhYTRhLCAweDViOWNjYTRmLCAweDY4MmU2ZmYzLFxuXHQweDc0OGY4MmVlLCAweDc4YTU2MzZmLCAweDg0Yzg3ODE0LCAweDhjYzcwMjA4LCAweDkwYmVmZmZhLCAweGE0NTA2Y2ViLCAweGJlZjlhM2Y3LCAweGM2NzE3OGYyXG5dO1xuXG5mdW5jdGlvbiBjeWNsZSAoc3RhdGUsIHcpIHtcblxuXHQvLyBpbml0aWFsaXplIGhhc2ggdmFsdWUgZm9yIHRoaXMgY2h1bms6XG5cdGxldCBhID0gc3RhdGVbMF07XG5cdGxldCBiID0gc3RhdGVbMV07XG5cdGxldCBjID0gc3RhdGVbMl07XG5cdGxldCBkID0gc3RhdGVbM107XG5cdGxldCBlID0gc3RhdGVbNF07XG5cdGxldCBmID0gc3RhdGVbNV07XG5cdGxldCBnID0gc3RhdGVbNl07XG5cdGxldCBoID0gc3RhdGVbN107XG5cblx0Ly9NYWluIGxvb3A6XG5cdC8vZm9yIGogZnJvbSAwIHRvIDYzXG5cdGZvcihsZXQgaiA9IDA7IGogPCA2NDsgKytqKXtcblx0XHQvL1MxIDo9IChlIHJpZ2h0cm90YXRlIDYpIHhvciAoZSByaWdodHJvdGF0ZSAxMSkgeG9yIChlIHJpZ2h0cm90YXRlIDI1KVxuXHRcdGNvbnN0IHMxID0gKGUgPj4+IDYgfCBlIDw8IDI2KSBeKGUgPj4+IDExIHwgZSA8PCAyMSkgXihlID4+PiAyNSB8IGUgPDwgNyk7XG5cdFx0Ly9jaCA6PSAoZSBhbmQgZikgeG9yICgobm90IGUpIGFuZCBnKVxuXHRcdGNvbnN0IGNoID0gKGUgJiBmKSBeICgofmUpICYgZyk7XG5cdFx0Ly90ZW1wIDo9IGggKyBTMSArIGNoICsga1tqXSArIHdbal1cblx0XHRsZXQgdGVtcCA9IGFkZDMyKGFkZDMyKGgsIHMxKSwgYWRkMzIoYWRkMzIoY2gsIGtbal0pLCB3W2pdKSk7XG5cdFx0Ly9kIDo9IGQgKyB0ZW1wO1xuXHRcdGQgPSBhZGQzMihkLCB0ZW1wKTtcblx0XHQvL1MwIDo9IChhIHJpZ2h0cm90YXRlIDIpIHhvciAoYSByaWdodHJvdGF0ZSAxMykgeG9yIChhIHJpZ2h0cm90YXRlIDIyKVxuXHRcdGNvbnN0IHMwID0gKGEgPj4+IDIgfCBhIDw8IDMwKSBeIChhID4+PiAxMyB8IGEgPDwgMTkpIF4gKGEgPj4+IDIyIHwgYSA8PCAxMCk7XG5cdFx0Ly9tYWogOj0gKGEgYW5kIChiIHhvciBjKSkgeG9yIChiIGFuZCBjKVxuXHRcdGNvbnN0IG1haiA9IChhICYgKGIgXiBjKSkgXiAoYiAmIGMpO1xuXHRcdC8vdGVtcCA6PSB0ZW1wICsgUzAgKyBtYWpcblx0XHR0ZW1wID0gYWRkMzIoYWRkMzIodGVtcCwgczApLCBtYWopO1xuXG5cdFx0aCA9IGc7XG5cdFx0ZyA9IGY7XG5cdFx0ZiA9IGU7XG5cdFx0ZSA9IGQ7XG5cdFx0ZCA9IGM7XG5cdFx0YyA9IGI7XG5cdFx0YiA9IGE7XG5cdFx0YSA9IHRlbXA7XG5cdH1cblxuXHQvLyBBZGQgdGhpcyBjaHVuaydzIGhhc2ggdG8gcmVzdWx0IHNvIGZhcjpcblx0c3RhdGVbMF0gPSBhZGQzMihzdGF0ZVswXSwgYSk7XG5cdHN0YXRlWzFdID0gYWRkMzIoc3RhdGVbMV0sIGIpO1xuXHRzdGF0ZVsyXSA9IGFkZDMyKHN0YXRlWzJdLCBjKTtcblx0c3RhdGVbM10gPSBhZGQzMihzdGF0ZVszXSwgZCk7XG5cdHN0YXRlWzRdID0gYWRkMzIoc3RhdGVbNF0sIGUpO1xuXHRzdGF0ZVs1XSA9IGFkZDMyKHN0YXRlWzVdLCBmKTtcblx0c3RhdGVbNl0gPSBhZGQzMihzdGF0ZVs2XSwgZyk7XG5cdHN0YXRlWzddID0gYWRkMzIoc3RhdGVbN10sIGgpO1xuXG59XG5cbmZ1bmN0aW9uIGNhbGwgKGgsIGRhdGEsIG8pIHtcblxuXHRjb25zdCB3ID0gbmV3IEFycmF5KDY0KTtcblxuXHQvLyBicmVhayBjaHVuayBpbnRvIHNpeHRlZW4gMzItYml0IGJpZy1lbmRpYW4gd29yZHMgd1tpXSwgMCDiiaQgaSDiiaQgMTVcblx0Zm9yIChsZXQgaiA9IDA7IGogPCAxNjsgKytqKSB7XG5cdFx0d1tqXSA9IGJpZzMyKGRhdGEsIG8gKyBqICogNCk7XG5cdH1cblxuXHQvLyBFeHRlbmQgdGhlIHNpeHRlZW4gMzItYml0IHdvcmRzIGludG8gc2l4dHktZm91ciAzMi1iaXQgd29yZHM6XG5cdC8vIGZvciBqIGZyb20gMTYgdG8gNjNcblx0Zm9yIChsZXQgaiA9IDE2OyBqIDwgNjQ7ICsraikge1xuXHRcdC8vczAgOj0gKHdbai0xNV0gcmlnaHRyb3RhdGUgNykgeG9yICh3W2otMTVdIHJpZ2h0cm90YXRlIDE4KSB4b3IgKHdbai0xNV0gcmlnaHRzaGlmdCAzKVxuXHRcdGNvbnN0IHMwID0gKHdbai0xNV0gPj4+IDcgfCB3W2otMTVdIDw8IDI1KSBeICh3W2otMTVdID4+PiAxOCB8IHdbai0xNV0gPDwgMTQpIF4gKHdbai0xNV0gPj4+IDMpO1xuXHRcdC8vczEgOj0gKHdbai0yXSByaWdodHJvdGF0ZSAxNykgeG9yICh3W2otMl0gcmlnaHRyb3RhdGUgMTkpIHhvciAod1tqLTJdIHJpZ2h0c2hpZnQgMTApXG5cdFx0Y29uc3QgczEgPSAod1tqLTJdID4+PiAxNyB8IHdbai0yXSA8PCAxNSkgXiAod1tqLTJdID4+PiAxOSB8IHdbai0yXSA8PCAxMykgXiAod1tqLTJdID4+PiAxMCk7XG5cdFx0Ly93W2pdIDo9IHdbai0xNl0gKyBzMCArIHdbai03XSArIHMxXG5cdFx0d1tqXSA9IGFkZDMyKGFkZDMyKHdbai0xNl0sIHMwKSwgYWRkMzIod1tqLTddLCBzMSkpO1xuXHR9XG5cblx0Y3ljbGUoaCwgdyk7XG5cbn1cblxuXG4vKipcbiAqIFNIQS0yMjRcbiAqXG4gKiBTSEEtMjI0IGlzIGlkZW50aWNhbCB0byBTSEEtMjU2LCBleGNlcHQgdGhhdDpcbiAqICAtIHRoZSBpbml0aWFsIHZhcmlhYmxlIHZhbHVlcyBoMCB0aHJvdWdoIGg3IGFyZSBkaWZmZXJlbnQsIGFuZFxuICogIC0gdGhlIG91dHB1dCBpcyBjb25zdHJ1Y3RlZCBieSBvbWl0dGluZyBoNy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNoYTIyNCAoYnl0ZXMsIG4sIGRpZ2VzdCkge1xuXG5cdC8vIFBSRVBBUkVcblxuXHRjb25zdCBxID0gbiAvIDggfCAwO1xuXHRjb25zdCB6ID0gcSAqIDg7XG5cdGNvbnN0IHUgPSBuIC0gejtcblxuXHQvLyBhcHBlbmQgdGhlIGJpdCAnMScgdG8gdGhlIG1lc3NhZ2Vcblx0bGV0IGxhc3QgO1xuXHRpZiAodSA+IDApIHtcblx0XHRsYXN0ID0gYnl0ZXNbcV0gJiAofjApIDw8ICg3LXUpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdGxhc3QgPSAweDgwO1xuXHR9XG5cblxuXG5cdC8vIE5vdGUgMTogQWxsIHZhcmlhYmxlcyBhcmUgdW5zaWduZWQgMzIgYml0cyBhbmQgd3JhcCBtb2R1bG8gMl4zMiB3aGVuIGNhbGN1bGF0aW5nXG5cdC8vIE5vdGUgMjogQWxsIGNvbnN0YW50cyBpbiB0aGlzIHBzZXVkbyBjb2RlIGFyZSBpbiBiaWcgZW5kaWFuLlxuXHQvLyBXaXRoaW4gZWFjaCB3b3JkLCB0aGUgbW9zdCBzaWduaWZpY2FudCBieXRlIGlzIHN0b3JlZCBpbiB0aGUgbGVmdG1vc3QgYnl0ZSBwb3NpdGlvblxuXG5cdC8vIEluaXRpYWxpemUgc3RhdGU6XG5cdGNvbnN0IGggPSBbMHhjMTA1OWVkOCwgMHgzNjdjZDUwNywgMHgzMDcwZGQxNywgMHhmNzBlNTkzOSwgMHhmZmMwMGIzMSwgMHg2ODU4MTUxMSwgMHg2NGY5OGZhNywgMHhiZWZhNGZhNF07XG5cblx0Ly8gUHJvY2VzcyB0aGUgbWVzc2FnZSBpbiBzdWNjZXNzaXZlIDUxMi1iaXQgY2h1bmtzOlxuXHQvLyBicmVhayBtZXNzYWdlIGludG8gNTEyLWJpdCBjaHVua3NcblxuXHRjb25zdCBtID0gbiAvIDUxMiB8IDA7XG5cdGNvbnN0IHkgPSAobiAtIDUxMiAqIG0pIC8gOCB8IDA7XG5cblx0Ly8gb2Zmc2V0IGluIGRhdGFcblx0bGV0IG8gPSAwO1xuXG5cdC8vIGZvciBlYWNoIGNodW5rXG5cdGZvciAobGV0IGogPSAwOyBqIDwgbTsgKytqLCBvICs9IDY0KSB7XG5cdFx0Y2FsbChoLCBieXRlcywgbyk7XG5cdH1cblxuXHQvLyBsYXN0IGJ5dGVzICsgcGFkZGluZyArIGxlbmd0aFxuXHRsZXQgdGFpbCA9IFtdO1xuXG5cdC8vIGxhc3QgYnl0ZXNcblx0Zm9yIChsZXQgaiA9IDA7IGogPCB5OyArK2opIHtcblx0XHR0YWlsLnB1c2goYnl0ZXNbbyArIGpdKTtcblx0fVxuXG5cdC8vIHNwZWNpYWwgY2FyZSB0YWtlbiBmb3IgdGhlIHZlcnkgbGFzdCBieXRlIHdoaWNoIGNvdWxkXG5cdC8vIGhhdmUgYmVlbiBtb2RpZmllZCBpZiBuIGlzIG5vdCBhIG11bHRpcGxlIG9mIDhcblx0dGFpbC5wdXNoKGxhc3QpO1xuXG5cblx0Ly8gYXBwZW5kIDAg4omkIGsgPCA1MTIgYml0cyAnMCcsIHNvIHRoYXQgdGhlIHJlc3VsdGluZ1xuXHQvLyBtZXNzYWdlIGxlbmd0aCAoaW4gYml0cykgaXMgY29uZ3J1ZW50IHRvIDQ0OCAobW9kIDUxMilcblx0bGV0IHplcm9lcyA9ICg0NDggLSAobiArIDEpICUgNTEyKSAvIDggfCAwO1xuXG5cdGlmICh6ZXJvZXMgPCAwKSB7XG5cdFx0Ly8gd2UgbmVlZCBhbiBhZGRpdGlvbmFsIGJsb2NrIGFzIHRoZXJlIGlzXG5cdFx0Ly8gbm90IGVub3VnaCBzcGFjZSBsZWZ0IHRvIGFwcGVuZFxuXHRcdC8vIHRoZSBsZW5ndGggb2YgdGhlIGRhdGEgaW4gYml0c1xuXG5cdFx0Zm9yIChsZXQgaiA9IDA7IGogPCAtemVyb2VzOyArK2opIHtcblx0XHRcdHRhaWwucHVzaCgwKTtcblx0XHR9XG5cblx0XHRjYWxsKGgsIHRhaWwsIDApO1xuXG5cdFx0emVyb2VzID0gNDQ4IC8gODtcblx0XHR0YWlsID0gW107XG5cdH1cblxuXG5cdC8vIHBhZCB3aXRoIHplcm9lc1xuXHRmb3IgKGxldCBqID0gMDsgaiA8IHplcm9lczsgKytqKSB7XG5cdFx0dGFpbC5wdXNoKDApO1xuXHR9XG5cblx0Ly8gYXBwZW5kIGxlbmd0aCBvZiBtZXNzYWdlIChiZWZvcmUgcHJlcGFyYXRpb24pLCBpbiBiaXRzLFxuXHQvLyBhcyA2NC1iaXQgYmlnLWVuZGlhbiBpbnRlZ2VyXG5cblx0Ly8gSmF2YVNjcmlwdCB3b3JrcyB3aXRoIDMyIGJpdCBpbnRlZ2Vycy5cblx0Ly8gdGFpbC5wdXNoKChuID4+PiA1NikgJiAweGZmKTtcblx0Ly8gdGFpbC5wdXNoKChuID4+PiA0OCkgJiAweGZmKTtcblx0Ly8gdGFpbC5wdXNoKChuID4+PiA0MCkgJiAweGZmKTtcblx0Ly8gdGFpbC5wdXNoKChuID4+PiAzMikgJiAweGZmKTtcblx0dGFpbC5wdXNoKDApO1xuXHR0YWlsLnB1c2goMCk7XG5cdHRhaWwucHVzaCgwKTtcblx0dGFpbC5wdXNoKDApO1xuXG5cdHRhaWwucHVzaCgobiA+Pj4gMjQpICYgMHhmZik7XG5cdHRhaWwucHVzaCgobiA+Pj4gMTYpICYgMHhmZik7XG5cdHRhaWwucHVzaCgobiA+Pj4gIDgpICYgMHhmZik7XG5cdHRhaWwucHVzaCgobiA+Pj4gIDApICYgMHhmZik7XG5cblx0Y2FsbChoLCB0YWlsLCAwKTtcblxuXHRkaWdlc3RbMF0gID0gKGhbMF0gPj4+IDI0KSAmIDB4ZmY7XG5cdGRpZ2VzdFsxXSAgPSAoaFswXSA+Pj4gMTYpICYgMHhmZjtcblx0ZGlnZXN0WzJdICA9IChoWzBdID4+PiAgOCkgJiAweGZmO1xuXHRkaWdlc3RbM10gID0gKGhbMF0gPj4+ICAwKSAmIDB4ZmY7XG5cdGRpZ2VzdFs0XSAgPSAoaFsxXSA+Pj4gMjQpICYgMHhmZjtcblx0ZGlnZXN0WzVdICA9IChoWzFdID4+PiAxNikgJiAweGZmO1xuXHRkaWdlc3RbNl0gID0gKGhbMV0gPj4+ICA4KSAmIDB4ZmY7XG5cdGRpZ2VzdFs3XSAgPSAoaFsxXSA+Pj4gIDApICYgMHhmZjtcblx0ZGlnZXN0WzhdICA9IChoWzJdID4+PiAyNCkgJiAweGZmO1xuXHRkaWdlc3RbOV0gID0gKGhbMl0gPj4+IDE2KSAmIDB4ZmY7XG5cdGRpZ2VzdFsxMF0gPSAoaFsyXSA+Pj4gIDgpICYgMHhmZjtcblx0ZGlnZXN0WzExXSA9IChoWzJdID4+PiAgMCkgJiAweGZmO1xuXHRkaWdlc3RbMTJdID0gKGhbM10gPj4+IDI0KSAmIDB4ZmY7XG5cdGRpZ2VzdFsxM10gPSAoaFszXSA+Pj4gMTYpICYgMHhmZjtcblx0ZGlnZXN0WzE0XSA9IChoWzNdID4+PiAgOCkgJiAweGZmO1xuXHRkaWdlc3RbMTVdID0gKGhbM10gPj4+ICAwKSAmIDB4ZmY7XG5cdGRpZ2VzdFsxNl0gPSAoaFs0XSA+Pj4gMjQpICYgMHhmZjtcblx0ZGlnZXN0WzE3XSA9IChoWzRdID4+PiAxNikgJiAweGZmO1xuXHRkaWdlc3RbMThdID0gKGhbNF0gPj4+ICA4KSAmIDB4ZmY7XG5cdGRpZ2VzdFsxOV0gPSAoaFs0XSA+Pj4gIDApICYgMHhmZjtcblx0ZGlnZXN0WzIwXSA9IChoWzVdID4+PiAyNCkgJiAweGZmO1xuXHRkaWdlc3RbMjFdID0gKGhbNV0gPj4+IDE2KSAmIDB4ZmY7XG5cdGRpZ2VzdFsyMl0gPSAoaFs1XSA+Pj4gIDgpICYgMHhmZjtcblx0ZGlnZXN0WzIzXSA9IChoWzVdID4+PiAgMCkgJiAweGZmO1xuXHRkaWdlc3RbMjRdID0gKGhbNl0gPj4+IDI0KSAmIDB4ZmY7XG5cdGRpZ2VzdFsyNV0gPSAoaFs2XSA+Pj4gMTYpICYgMHhmZjtcblx0ZGlnZXN0WzI2XSA9IChoWzZdID4+PiAgOCkgJiAweGZmO1xuXHRkaWdlc3RbMjddID0gKGhbNl0gPj4+ICAwKSAmIDB4ZmY7XG5cblx0cmV0dXJuIGRpZ2VzdDtcblxufVxuIl19